"""
Django settings for blogproject project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from decouple import config
import os
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ukz72g)*267@$nvdk**+6#+a*nyzh_1t3o2=@wxtpga$cew)2^'

# SECURITY WARNING: poner en false cuando se temrine el proyecto
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blogapp',
    'widget_tweaks',
    'ckeditor',
    'ckeditor_uploader',
    'social_django',  #Se añade para la autenticación con Google
    'django_extensions',
    'axes', #Se añade django axes
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'axes.middleware.AxesMiddleware', # Middleware creado para que el login no me ignore el Axes
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
]

ROOT_URLCONF = 'blogproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['blogapp/templates/blogapp'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blogproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Directorio donde están los archivos estáticos
STATICFILES_DIRS = [
    BASE_DIR / "static",  # Esto apunta a la carpeta "static" en la raíz del proyecto
]


#STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
#STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': [
            ['Bold', 'Italic', 'Underline', 'Strike'],  #Herramientas de formato básico para tipo de letra
            ['NumberedList', 'BulletedList', 'Blockquote'],  #Listas y citas
            ['Link', 'Unlink'],  #Agregar Enlaces
            ['Image'],  #Botón para subir imagen
            ['Undo', 'Redo'],  #Opción para deshacer/rehacer
            ['Format'],  #Formatos de títulos como h1 - h2
            ['Maximize'],  #Opción para entrar en pantalla completa
        ],
        'height': '300%',
        'width': '100%',
        'removePlugins': ['stylesheetparser'],  #Elimina los plugins innecesarios
        'extraPlugins': ['codesnippet'],  # Opcion para añadir plugin para fragmentos de código
    },
}

#Configuración para subir imágenes
CKEDITOR_UPLOAD_PATH = 'uploads/'  #Carpeta donde se guardarán las imágenes

#Configuración de archivos multimedia
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media' / 'uploads'  # Subcarpeta 'uploads' dentro de media
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "static"]


#Authentication redirects
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Configuración de Django Axes
AXES_LOGIN_FAILURE_LIMIT = 3  # Máximo de 3 intentos fallidos antes de bloquear
AXES_COOLOFF_TIME = 1  # Bloqueo por 1 hora
AXES_LOCKOUT_TEMPLATE = 'axes/lockout.html'  # Plantilla para el mensaje de bloqueo
AXES_LOCKOUT_URL = '/accounts/locked/'  # URL a la que redirigir tras bloquear


#Authenticacion del Backend
AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesBackend',  # Añadido para Axes
    'social_core.backends.google.GoogleOAuth2',  # Solo Google
    'django.contrib.auth.backends.ModelBackend',  # Backend por defecto de Django
]


# Configuración para manejar IPs en proxies
AXES_USE_USER_AGENT = True
AXES_META_PRECEDENCE_ORDER = [
      'HTTP_X_FORWARDED_FOR',
      'REMOTE_ADDR',
  ]


#Claves de Google
print("GOOGLE_OAUTH2_KEY:", config('GOOGLE_OAUTH2_KEY'))
print("GOOGLE_OAUTH2_SECRET:", config('GOOGLE_OAUTH2_SECRET'))
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = config('GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = config('GOOGLE_OAUTH2_SECRET')


#SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get('GOOGLE_OAUTH2_KEY', '')
#SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get('GOOGLE_OAUTH2_SECRET', '')

#Pipeline de Autenticación
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)

logging.basicConfig(level=logging.DEBUG)
